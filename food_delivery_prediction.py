# -*- coding: utf-8 -*-
"""Food delivery Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hrJwboqR_RI0VNNXNhI_lFfwZ0xy9G0i
"""

import pandas as pd
import pandas_profiling

df = pd.read_excel('Data_Train.xlsx')

df.head()

df.describe()

df.dtypes

df.head()

#Removing ₹ , ',' , 'for' from Average_Cost
df.Average_Cost= df.Average_Cost.str.strip('₹')
df.Average_Cost= df.Average_Cost.str.replace('\,', '')
df = df[df.Average_Cost != 'for']
df.Average_Cost= df['Average_Cost'].astype(str).astype(int)

#Removing ₹ from Minimum_Order
df.Minimum_Order= df.Minimum_Order.str.strip('₹')
df.Minimum_Order= df['Minimum_Order'].astype(str).astype(int)

#Replace - with 0 for ratings, votes and reviews
df.replace(to_replace = '-', value = 0,inplace=True) 

#Defining new categories for string values in Rating
df.replace(to_replace = 'NEW', value = 6,inplace=True)
df.replace(to_replace = 'Opening Soon', value = 7,inplace=True)  
df.replace(to_replace = 'Temporarily Closed', value = 8,inplace=True)  

#Changing data types for Rating,Votes,Reviews and Delivery Time
df.Rating= df.Rating.astype(str).astype(float)
df.Votes= df.Votes.astype(str).astype(int)
df.Reviews= df.Reviews.astype(str).astype(int)
#df.Delivery_Time = df.Delivery_Time.str.strip(' minutes').astype(int)

#Changing Restaurant, Location, Crusines to String Data Type
df.Restaurant= df.Restaurant.astype(str)
df.Location= df.Location.astype(str)
df.Cuisines= df.Cuisines.astype(str)

pandas_profiling.ProfileReport(df)

# encode string class values as integers
from sklearn.preprocessing import LabelEncoder
res_encoder = LabelEncoder()
loc_encoder = LabelEncoder()
cui_encoder = LabelEncoder()

restaurant_encoder = res_encoder.fit(df.Restaurant)
res_dict = dict(zip(res_encoder.classes_, res_encoder.transform(res_encoder.classes_)))
df['Restaurant']=df['Restaurant'].apply(lambda x: res_dict.get(x, '<unknown_value>'))

location_encoder = loc_encoder.fit(df.Location)
loc_dict = dict(zip(loc_encoder.classes_, loc_encoder.transform(loc_encoder.classes_)))
df['Location']=df['Location'].apply(lambda x: loc_dict.get(x, '<unknown_value>'))

cui_encoder.fit(df.Cuisines)
cui_dict = dict(zip(cui_encoder.classes_, cui_encoder.transform(cui_encoder.classes_)))
df['Cuisines']=df['Cuisines'].apply(lambda x: cui_dict.get(x, '<unknown_value>'))

dft=pd.read_excel('Data_Test.xlsx')
dft.drop(['Votes','Restaurant'],inplace=True,axis=1)
#Removing ₹ , ',' , 'for' from Average_Cost
dft.Average_Cost= dft.Average_Cost.str.strip('₹')
dft.Average_Cost= dft.Average_Cost.str.replace('\,', '')
dft = dft[dft.Average_Cost != 'for']
dft.Average_Cost= dft['Average_Cost'].astype(str).astype(int)

#Removing ₹ from Minimum_Order
dft.Minimum_Order= dft.Minimum_Order.str.strip('₹')
dft.Minimum_Order= dft['Minimum_Order'].astype(str).astype(int)

#Replace - with 0 for ratings, votes and reviews
dft.replace(to_replace = '-', value = 0,inplace=True) 

#Defining new categories for string values in Rating
dft.replace(to_replace = 'NEW', value = 6,inplace=True)
dft.replace(to_replace = 'Opening Soon', value = 7,inplace=True)  
dft.replace(to_replace = 'Temporarily Closed', value = 8,inplace=True)  

#Changing data types for Rating,Votes,Reviews and Delivery Time
dft.Rating= dft.Rating.astype(str).astype(float)
dft.Reviews= dft.Reviews.astype(str).astype(int)

#dft['Restaurant']=dft['Restaurant'].apply(lambda x: res_dict.get(x, -1))
dft['Location']=dft['Location'].apply(lambda x: loc_dict.get(x, -1))
dft['Cuisines']=dft['Cuisines'].apply(lambda x: cui_dict.get(x, -1))
dft

x=df.iloc[:,:-1]
x.drop(['Votes','Restaurant'],inplace=True,axis=1)
y=df.iloc[:,-1]
print('x=',x.shape,'y=',y.shape)

from xgboost import XGBClassifier
clf = XGBClassifier()
clf.fit(x, y)
y_pred=clf.predict(dft)

from sklearn.svm import LinearSVC
clf=LinearSVC(random_state=0, tol=1e-5,max_iter=10000)
clf.fit(x, y)
y_pred=clf.predict(dft)

from sklearn.model_selection import GridSearchCV
from sklearn import datasets, svm
parameter_candidates = [
  {'C': [1, 10, 100, 1000], 'kernel': ['linear']},
  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},
]
# Create a classifier object with the classifier and parameter candidates
clf = GridSearchCV(estimator=svm.SVC(), param_grid=parameter_candidates, n_jobs=-1)

# Train the classifier on data1's feature and target data
clf.fit(x,y)   

# View the accuracy score
print('Best score for data1:', clf.best_score_)

from sklearn.metrics import confusion_matrix,precision_recall_fscore_support,accuracy_score
precision_recall_fscore_support(y, y_pred, average='macro')
confusion_matrix(y,y_pred)
accuracy_score(y, y_pred)

final = {'Delivery_Time':y_pred}
final = pd.DataFrame(final)
final.shape

final.to_excel('Submission.xlsx',index = False)

dft.shape